generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id         String    @id @default(uuid())
  email      String    @unique(map: "User_email_key")
  password   String
  name       String
  role       user_role @default(USER)
  department String?
  avatar     String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isActive   Boolean   @default(true)
  addedBy    String?

  mou_submissions mou_submissions[]
  notifications   Notification[]
}

enum user_role {
  USER
  LEGAL_ADMIN
  FACULTY_ADMIN
  SENATE_ADMIN
  UGC_ADMIN
  SUPER_ADMIN
}

model mou_submissions {
  id                  String    @id
  title               String
  partnerOrganization String
  purpose             String
  description         String
  dateSubmitted       DateTime  @default(now())
  datesSigned         DateTime?
  validUntil          DateTime
  submittedBy         String
  status              Json
  documents           Json
  renewalOf           String?
  history             Json
  userId              String
  organizationId      String?   // now optional

  user           user           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Organization   Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // self-relation for renewals
  parentMOU   mou_submissions?  @relation("Renewal", fields: [renewalOf], references: [id])
  renewedMOUs mou_submissions[] @relation("Renewal")
}


model Organization {
  id        String   @id @default(uuid())
  name      String   @unique
  address   String?  // The formatted address from Google
  lat       Float?   // Latitude
  lng       Float?   // Longitude
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mou_submissions mou_submissions[]
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  title     String
  message   String
  mouId     String?   // <-- New: related MOU ID, if applicable
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
}
